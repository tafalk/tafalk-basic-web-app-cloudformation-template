Description:
  This template deploys a VPC (with a private and a public subnet) and NAT Instance(s)

Mappings:
  RegionMap:
    eu-central-1:
      NatInstanceAMI: "ami-06a5303d47fbd8c60"

Parameters:
  ProjectIdentifierName:
    Type: String
  EnvironmentName:
    Type: String
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  VpcCIDR:
    Type: String
  PublicSubnet1CIDR:
    Type: String
  PublicSubnet2CIDR:
    Type: String
  PrivateSupportSubnet1CIDR:
    Type: String
  PrivateSupportSubnet2CIDR:
    Type: String
  PrivateComputeSubnet1CIDR:
    Type: String
  PrivateComputeSubnet2CIDR:
    Type: String
  NatInstanceRequirement:
    Type: String

Conditions:
  CreateNAT: !Not [!Equals [ !Ref NatInstanceRequirement, none ]]
  CreateMultiAzNAT: !Equals [ !Ref NatInstanceRequirement, multi-az ]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Sub "${ProjectIdentifierName}-${EnvironmentName}-vpc"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:  !Sub "${ProjectIdentifierName}-${EnvironmentName}-igw"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-pub-subnet-az1"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-pub-subnet-az2"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  # Private Subnets
  PrivateSupportSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSupportSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-prv-sup-subnet-az1"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  PrivateSupportSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSupportSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-prv-sup-subnet-az2"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  PrivateComputeSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateComputeSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-prv-cmp-subnet-az1"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  PrivateComputeSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateComputeSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-prv-cmp-subnet-az2"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  # Security Groups
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-noingress-sg"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the nat instance
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      SecurityGroupIngress:
        - CidrIp: !Ref PrivateSupportSubnet1CIDR
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: !Ref PrivateSupportSubnet1CIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: !Ref PrivateSupportSubnet2CIDR
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: !Ref PrivateSupportSubnet2CIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: !Ref PrivateComputeSubnet1CIDR
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: !Ref PrivateComputeSubnet1CIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: !Ref PrivateComputeSubnet2CIDR
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: !Ref PrivateComputeSubnet2CIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-nat-sg"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  # NAT instances 1 (always there)
  NatInstance1:
    Type: AWS::EC2::Instance
    DependsOn: InternetGatewayAttachment
    Condition: CreateNAT
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", NatInstanceAMI]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SourceDestCheck: false
      Tenancy: default
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref NATSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-nat-az1"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  # NAT instances 2 (only if wanted high available)
  NatInstance2:
    Type: AWS::EC2::Instance
    DependsOn: InternetGatewayAttachment
    Condition: CreateMultiAzNAT
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", NatInstanceAMI]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      InstanceType: t2.micro
      SourceDestCheck: false
      Tenancy: default
      NetworkInterfaces:
      - SubnetId: !Ref PublicSubnet2
        GroupSet:
          - !Ref NATSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: "0"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-nat-az2"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-pub-rt"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName
  PrivateSupportRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-prv-sup-rt-az1"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName
  PrivateSupportRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-prv-sup-rt-az2"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName
  PrivateComputeRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-prv-cmp-rt-az1"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName
  PrivateComputeRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectIdentifierName}-${EnvironmentName}-prv-sup-rt-az2"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  # Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  DefaultSupportPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSupportRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance1
  DefaultSupportPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSupportRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance1
  DefaultComputePrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateComputeRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance1
  DefaultComputePrivateRoute2:
    Type: AWS::EC2::Route
    Condition: CreateMultiAzNAT
    Properties:
      RouteTableId: !Ref PrivateComputeRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance2

  # Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateSupportSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSupportRouteTable1
      SubnetId: !Ref PrivateSupportSubnet1
  PrivateSupportSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSupportRouteTable2
      SubnetId: !Ref PrivateSupportSubnet2
  PrivateComputeSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateComputeRouteTable1
      SubnetId: !Ref PrivateComputeSubnet1
  PrivateComputeSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateComputeRouteTable2
      SubnetId: !Ref PrivateComputeSubnet2

# Outputs of stack
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSupportSubnet1, !Ref PrivateSupportSubnet2, !Ref PrivateComputeSubnet1, !Ref PrivateComputeSubnet2 ]]
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
  PrivateSupportSubnet1:
    Description: A reference to the private support subnet in the 1st Availability Zone
    Value: !Ref PrivateSupportSubnet1
  PrivateSupportSubnet2:
    Description: A reference to the private support subnet in the 2nd Availability Zone
    Value: !Ref PrivateSupportSubnet2
  PrivateComputeSubnet1:
    Description: A reference to the private compute subnet in the 1st Availability Zone
    Value: !Ref PrivateComputeSubnet1
  PrivateComputeSubnet2:
    Description: A reference to the private compute subnet in the 2nd Availability Zone
    Value: !Ref PrivateComputeSubnet2
  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
  NATSecurityGroup:
    Description: Security group for NAT instances
    Value: !Ref NATSecurityGroup
