Description:
  This template deploys Cognito User and Identity Pools
Parameters:
  ProjectIdentifierName:
    Type: String
  EnvironmentName:
    Type: String
  CognitoUserExporterFunctionName:
    Type: String
  DefaultUserGroupName:
    Type: String
  AdminUserGroupName:
    Type: String
  UserFilesBucketArn:
    Type: String

Resources:
  # Creates a User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-up"
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      AliasAttributes:
        - 'email'
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

      # Email
      EmailVerificationMessage: Your verification code is {####}
      EmailVerificationSubject: !Sub "${ProjectIdentifierName} verification code"

      # Triggered Lambda
      LambdaConfig:
        # Calculate function ARN from its name
        PostConfirmation: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CognitoUserExporterFunctionName}"

  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-up-client"
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  # Creates a User Pool Group
  DefaultUserGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref UserPool
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSAppSyncInvokeFullAccess"

  AdminUserGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref UserPool
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSAppSyncInvokeFullAccess"

  UserPoolDefaultUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Default User Group
      GroupName: !Ref DefaultUserGroupName
      RoleArn: !GetAtt DefaultUserGroupRole.Arn
      UserPoolId: !Ref UserPool

  UserPoolAdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Admin User Group
      GroupName: !Ref AdminUserGroupName
      RoleArn: !GetAtt AdminUserGroupRole.Arn
      UserPoolId: !Ref UserPool

  # Creates a federeated Identity pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${ProjectIdentifierName}_${EnvironmentName}_ip"
      AllowUnauthenticatedIdentities: True
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Assigns the roles to the Identity Pool
  CognitoUnauthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: !Sub "${UserFilesBucketArn}/protected/*"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource: !Sub "${UserFilesBucketArn}/uploads/*"
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource: !Sub "${UserFilesBucketArn}"
                Condition:
                  StringLike:
                    "s3:prefix":
                      - "public/"
                      - "public/*"
                      - "protected/"
                      - "protected/*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource:
                  - !Join ["/", [ !Ref UserFilesBucketArn, "public", "*"]]
              - Effect: "Allow"
                Action:
                  - "appsync:GraphQL"
                Resource: !Sub "arn:aws:appsync:${AWS::Region}:*:apis/*"
              - Effect: "Deny"
                Action:
                  - "appsync:GraphQL"
                Resource: !Sub "arn:aws:appsync:${AWS::Region}:*:apis/*/types/Mutation/*"

  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: !Sub "${UserFilesBucketArn}/protected/*"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource: !Sub "${UserFilesBucketArn}/uploads/*"
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource: !Sub "${UserFilesBucketArn}"
                Condition:
                  StringLike:
                    "s3:prefix":
                      - "public/"
                      - "public/*"
                      - "protected/"
                      - "protected/*"
                      - "private/${cognito-identity.amazonaws.com:sub}/"
                      - "private/${cognito-identity.amazonaws.com:sub}/*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource:
                  - !Join ["/", [ !Ref UserFilesBucketArn, "public", "*"]]
                  - !Join ["/", [ !Ref UserFilesBucketArn, "protected", "${cognito-identity.amazonaws.com:sub}", "*"]]
                  - !Join ["/", [ !Ref UserFilesBucketArn, "private", "${cognito-identity.amazonaws.com:sub}", "*"]]
              - Effect: "Allow"
                Action:
                  - "appsync:GraphQL"
                Resource:
                  - !Sub "arn:aws:appsync:${AWS::Region}:*:apis/*"

  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnauthorizedRole.Arn

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub "${ProjectIdentifierName}-${EnvironmentName}-up-id"
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${ProjectIdentifierName}-${EnvironmentName}-upc-id"
  IdentityPoolId:
    Value: !Ref IdentityPool
    Export:
      Name: !Sub "${ProjectIdentifierName}-${EnvironmentName}-ip-id"
