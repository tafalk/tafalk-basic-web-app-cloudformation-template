schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# Q U E R I E S
type Query {
  # User
  getUserByUsername(username: String!): [User]
  listStreamsByUser(first: Int, after: String, userId: ID!): StreamConnection
  listLikesByUser(first: Int, after: String, userId: ID!): LikeConnection
  listUserInteractionsByActorUserIdIndex(actorUserId: String!, first: Int, after: String): UserInteractionConnection

  # Stream
  getStream(id: ID!): Stream
  listSealedStreams(first: Int, after: String): StreamConnection
  listLiveStreams(first: Int, after: String): StreamConnection

  # User interaction
  queryUserInteractionsBetweenUsersByUserIdIndices(actorUserId: String!, targetUserId: String!): [UserInteraction]

  # Stream reaction
  listStreamLikes(streamId: ID!): [Like]
  listPaginatedStreamComments(streamId: ID!, first: Int, after: String): CommentConnection

  # Search
  search(query: String!): [SearchResult]

  # Recaptcha V3 token
  getRecaptchaTokenResult(token: String!, ip: String): RecaptchaV3Result  
}

# M U T A T I O N S
type Mutation {
  # User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User

  # Stream
  createStream(input: CreateStreamInput!): Stream
  updateStream(input: UpdateStreamInput!): Stream 

  # User interaction
  createUserInteraction(input: CreateUserInteractionInput!): UserInteraction
  deleteUserInteraction(input: DeleteUserInteractionInput!): UserInteraction

  # Stream reaction
  createLike(input: CreateLikeInput!): Like
  createComment(input: CreateCommentInput!): Comment
  deleteLike(input: DeleteLikeInput!): Like

  # Flag
  createFlag(input: CreateFlagInput!): Flag
  deleteFlag(input: DeleteFlagInput!): Flag
}

# S U B S C R I P T I O N S
type Subscription {
  onUpdateStream(id: ID!): Stream @aws_subscribe(mutations : ["updateStream"])
  onCreateOrDeleteLike(streamId: String!): Like @aws_subscribe(mutations : ["createLike", "deleteLike"])
}

# I N T E R F A C E S
interface CommunityReaction {
  id: ID!
  streamId: String!
  time: String
  userId: String!
}

# U N I O N S
union SearchResult = Stream | User

# I N P U T S
# User
input UpdateUserInput {
  allowDirectMesages: Boolean
  bio: String
  birthDate: String
  cognitoIdentityId: String
  createdAt: String
  email: String
  fullName: String
  id: ID!
  lastAccess: String
  locationId: String
  preferredName: String
  profilePictureKey: String
  profilePrivacy: ProfilePrivacy
  site: String
  theme: String
  username: String
}

input DeleteUserInput {
  id: ID!
}

# Stream
input CreateStreamInput {
  body: String!
  id: ID!
  isSealed: Int
  locationId: String
  mood: [Mood]
  position: [Position]
  privacy: StreamPrivacy!
  sealedAt: String
  startedAt: String!
  title: String
  track: String
  userId: String!
  visits: Int
}

input UpdateStreamInput {
  body: String
  id: ID!
  isSealed: Int
  locationId: String
  mood: [Mood]
  position: [Position]
  privacy: StreamPrivacy
  sealedAt: String
  startedAt: String
  title: String
  track: String
  visits: Int
}

# User interaction
input CreateUserInteractionInput {
  actorUserId: String!
  interactionType: UserInteractionType
  targetUserId: String!
}

input DeleteUserInteractionInput {
  id: ID!
}

# Stream reaction
input CreateLikeInput {
  streamId: String!
  time: String
  userId: String!
}

input CreateCommentInput {
  content: String
  streamId: String!
  time: String
  userId: String!
}

input DeleteLikeInput {
  id: ID!
}

# Flag
input CreateFlagInput {
  category: String!
  commentId: String
  detail: String!
  note: String
  reviewNote: String
  reviewStatus: String
  streamId: String
  time: String
  userId: String
}

input DeleteFlagInput {
  id: ID!
}

# T Y P E S
type User {
  allowDirectMesages: Boolean
  bio: String
  birthDate: String!
  cognitoIdentityId: String
  comments: CommentConnection
  createdAt: String
  email: String
  id: ID!
  lastAccess: String
  likedStreams: LikeConnection
  location: Location
  locationId: String
  preferredName: String
  profilePictureKey: String
  profilePrivacy: ProfilePrivacy!
  site: String
  streams: StreamConnection
  theme: String
  userInteractions: UserInteractionConnection
  username: String!
}

type Stream {
  body: String!
  comments: [Comment]
  flags: [Flag]
  id: ID!
  isSealed: Int
  likes: [Like]
  location: Location
  locationId: String
  mood: [Mood]
  position: [Position]
  privacy: StreamPrivacy!
  sealedAt: String
  startedAt: String!
  title: String
  track: String
  uncloggerHintId: String
  user: User!
  userId: String!
  visits: Int
}

type UserInteraction {
  actorUserId: String!
  id: ID!
  interactionType: UserInteractionType
  lastChangeTime: String!
  targetUser: User
  targetUserId: String!
}

type Like implements CommunityReaction {
  id: ID!
  stream: Stream!
  streamId: String!
  time: String
  userId: String!
}

type Comment implements CommunityReaction {
  content: String
  flags: [Flag]
  id: ID!
  streamId: String!
  time: String
  user: User!
  userId: String!
}

type Flag {
  category: String!
  commentId: String
  detail: String!
  id: ID!
  note: String
  reviewNote: String
  reviewStatus: String
  stream: Stream
  streamId: String
  time: String
  userId: String!
}

type RecaptchaV3Result {
  challengeTimestamp: String
  errorCodes: [String]
  hostname: String
  success: Boolean
}

type Location {
	id: ID!
	value: String
}

# C O N N E C T I O N   T Y P E S
type StreamConnection {
  items: [Stream]
  nextToken: String
}

type UserInteractionConnection {
  items: [UserInteraction]
  nextToken: String
}

type LikeConnection {
  items: [Like]
  nextToken: String
}

type CommentConnection {
  items: [Comment]
  nextToken: String
}

# E N U M S
enum Mood {
  Aroused
  AsUsual
  Drunk
  HardToExplain
  High
  Melancholic
  Relieved
}

enum Position {
  AllFours
  Kneeling
  Lying
  Sitting
  Squatting
  Standing
  Walking
}

enum ProfilePrivacy {
  Private
  Protected
  Public
}

enum StreamPrivacy {
  Private
  PrivateButWatching
  Protected
  Public
}
enum UncloggerHintCategory {
  Default
  DidYouKnow
  HistoricalEvent
  News
  PhilosophicalSchool
}

enum UserInteractionType {
  Block
  Watch
}
