schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface CommunityReaction {
  id: ID!
  streamId: String!
  time: String
  userId: String!
}

union SearchResult = Stream | User

type Comment implements CommunityReaction {
  content: String
  flags: [Flag]
  id: ID!
  streamId: String!
  time: String
  user: User!
  userId: String!
}

type CommentConnection {
  items: [Comment]
  nextToken: String
}

type Flag {
  category: String!
  commentId: String
  detail: String!
  id: ID!
  note: String
  reviewNote: String
  reviewStatus: String
  stream: Stream
  streamId: String
  time: String
  userId: String!
}

type FlagConnection {
  items: [Flag]
  nextToken: String
}

type Like implements CommunityReaction {
  id: ID!
  stream: Stream!
  streamId: String!
  time: String
  userId: String!
}

type LikeConnection {
  items: [Like]
  nextToken: String
}

type Location {
  id: ID!
  value: String
}

type Mutation {
  createComment(input: CreateCommentInput!): Comment @aws_auth(cognito_groups : ["TafalkUsers"])
  createFlag(input: CreateFlagInput!): Flag
  createLike(input: CreateLikeInput!): Like @aws_auth(cognito_groups : ["TafalkUsers"])
  createStream(input: CreateStreamInput!): Stream @aws_auth(cognito_groups : ["TafalkUsers"])
  createUncloggerHint(input: CreateUncloggerHintInput!): UncloggerHint
  createUser(input: CreateUserInput!): User @aws_auth(cognito_groups : ["TafalkUsers"])
  createUserInteraction(input: CreateUserInteractionInput!): UserInteraction @aws_auth(cognito_groups : ["TafalkUsers"])
  deleteComment(input: DeleteCommentInput!): Comment @aws_auth(cognito_groups : ["TafalkUsers"])
  deleteFlag(input: DeleteFlagInput!): Flag
  deleteLike(input: DeleteLikeInput!): Like @aws_auth(cognito_groups : ["TafalkUsers"])
  deleteStream(input: DeleteStreamInput!): Stream @aws_auth(cognito_groups : ["TafalkUsers"])
  deleteUncloggerHint(input: DeleteUncloggerHintInput!): UncloggerHint
  deleteUser(input: DeleteUserInput!): User
  deleteUserInteraction(input: DeleteUserInteractionInput!): UserInteraction @aws_auth(cognito_groups : ["TafalkUsers"])
  updateComment(input: UpdateCommentInput!): Comment @aws_auth(cognito_groups : ["TafalkUsers"])
  updateFlag(input: UpdateFlagInput!): Flag
  updateLike(input: UpdateLikeInput!): Like @aws_auth(cognito_groups : ["TafalkUsers"])
  updateStream(input: UpdateStreamInput!): Stream @aws_auth(cognito_groups : ["TafalkUsers"])
  updateUncloggerHint(input: UpdateUncloggerHintInput!): UncloggerHint
  updateUser(input: UpdateUserInput!): User @aws_auth(cognito_groups : ["TafalkUsers"])
  updateUserInteraction(input: UpdateUserInteractionInput!): UserInteraction @aws_auth(cognito_groups : ["TafalkUsers"])
}

type Query {
  getComment(id: ID!): Comment
  getFlag(id: ID!): Flag
  getLike(id: ID!): Like
  getRecaptchaTokenResult(ip: String, token: String!): RecaptchaV3Result
  getStream(id: ID!): Stream
  getUncloggerHint(id: ID!): UncloggerHint
  getUser(id: ID!): User
  getUserByUsername(username: String!): [User]
  getUserInteraction(id: ID!): UserInteraction
  listAllStreamsByUsers(userIds: [ID!]): [Stream]
  listComments(after: String, first: Int): CommentConnection
  listFlags(filter: TableFlagFilterInput, limit: Int, nextToken: String): FlagConnection
  listLikes(after: String, first: Int): LikeConnection
  listLikesByUser(after: String, first: Int, userId: ID!): LikeConnection
  listLiveStreams(after: String, first: Int): StreamConnection @aws_auth(cognito_groups : ["TafalkUsers"])
  listPaginatedStreamComments(after: String, first: Int, streamId: ID!): CommentConnection
  listSealedStreams(after: String, first: Int): StreamConnection
  listStreamLikes(streamId: ID!): [Like]
  listStreams(after: String, first: Int): StreamConnection
  listStreamsByUser(after: String, first: Int, userId: ID!): StreamConnection
  listUncloggerHints(after: String, first: Int): UncloggerHintConnection
  listUserInteractions(after: String, first: Int): UserInteractionConnection
  listUserInteractionsByActorUserIdIndex(actorUserId: String!, after: String, first: Int): UserInteractionConnection
  listUserInteractionsByTargetUserIdIndex(after: String, first: Int, targetUserId: String!): UserInteractionConnection
  listUsers(after: String, first: Int): UserConnection
  queryUserInteractionsBetweenUsersByUserIdIndices(actorUserId: String!, targetUserId: String!): [UserInteraction]
  search(query: String!): [SearchResult] @aws_auth(cognito_groups : ["TafalkUsers"])
}

type RecaptchaV3Result {
  challengeTimestamp: String
  errorCodes: [String]
  hostname: String
  success: Boolean
}

type Stream {
  body: String!
  comments: [Comment]
  flags: [Flag]
  id: ID!
  isSealed: Int
  likes: [Like]
  location: Location
  locationId: String
  mood: [Mood]
  position: [Position]
  privacy: StreamPrivacy!
  sealedAt: String
  startedAt: String!
  title: String
  track: String
  uncloggerHintId: String
  user: User!
  userId: String!
  visits: Int
}

type StreamConnection {
  items: [Stream]
  nextToken: String
}

type Subscription {
  onCreateComment(content: String, id: ID, time: String): Comment @aws_subscribe(mutations : ["createComment"])
  onCreateFlag(category: String, detail: String, id: ID, streamId: String, userId: String): Flag @aws_subscribe(mutations : ["createFlag"])
  onCreateLike(id: ID, time: String): Like @aws_subscribe(mutations : ["createLike"])
  onCreateOrDeleteLike(streamId: String!): Like @aws_subscribe(mutations : ["createLike", "deleteLike"])
  onCreateStream(body: String, id: ID, locationId: String, title: String): Stream @aws_subscribe(mutations : ["createStream"])
  onCreateUncloggerHint(content: String, id: ID): UncloggerHint @aws_subscribe(mutations : ["createUncloggerHint"])
  onCreateUser(birthDate: String, email: String, id: ID, preferredName: String, username: String): User @aws_subscribe(mutations : ["createUser"])
  onCreateUserInteraction(actorUserId: String, id: ID, lastChangeTime: String, targetUserId: String): UserInteraction @aws_subscribe(mutations : ["createUserInteraction"])
  onDeleteComment(content: String, id: ID, time: String): Comment @aws_subscribe(mutations : ["deleteComment"])
  onDeleteFlag(category: String, detail: String, id: ID, streamId: String, userId: String): Flag @aws_subscribe(mutations : ["deleteFlag"])
  onDeleteLike(id: ID, time: String): Like @aws_subscribe(mutations : ["deleteLike"])
  onDeleteStream(body: String, id: ID, locationId: String, title: String): Stream @aws_subscribe(mutations : ["deleteStream"])
  onDeleteUncloggerHint(content: String, id: ID): UncloggerHint @aws_subscribe(mutations : ["deleteUncloggerHint"])
  onDeleteUser(bio: String, birthDate: String, email: String, id: ID, preferredName: String): User @aws_subscribe(mutations : ["deleteUser"])
  onDeleteUserInteraction(actorUserId: String, id: ID, lastChangeTime: String, targetUserId: String): UserInteraction @aws_subscribe(mutations : ["deleteUserInteraction"])
  onUpdateComment(content: String, id: ID, time: String): Comment @aws_subscribe(mutations : ["updateComment"])
  onUpdateFlag(category: String, detail: String, id: ID, streamId: String, userId: String): Flag @aws_subscribe(mutations : ["updateFlag"])
  onUpdateLike(id: ID, time: String): Like @aws_subscribe(mutations : ["updateLike"])
  onUpdateStream(id: ID!): Stream @aws_subscribe(mutations : ["updateStream"])
  onUpdateUncloggerHint(content: String, id: ID): UncloggerHint @aws_subscribe(mutations : ["updateUncloggerHint"])
  onUpdateUser(bio: String, birthDate: String, email: String, id: ID, preferredName: String): User @aws_subscribe(mutations : ["updateUser"])
  onUpdateUserInteraction(actorUserId: String, id: ID, lastChangeTime: String, targetUserId: String): UserInteraction @aws_subscribe(mutations : ["updateUserInteraction"])
}

type UncloggerHint {
  category: UncloggerHintCategory
  content: String!
  id: ID!
}

type UncloggerHintConnection {
  items: [UncloggerHint]
  nextToken: String
}

type User {
  allowDirectMesages: Boolean
  bio: String
  birthDate: String!
  cognitoIdentityId: String
  comments: CommentConnection
  createdAt: String
  email: String
  id: ID!
  lastAccess: String
  likedStreams: LikeConnection
  location: Location
  locationId: String
  preferredName: String
  profilePictureKey: String
  profilePrivacy: ProfilePrivacy!
  site: String
  streams: StreamConnection
  theme: String
  userInteractions: UserInteractionConnection
  username: String!
}

type UserConnection {
  items: [User]
  nextToken: String
}

type UserInteraction {
  actorUserId: String!
  id: ID!
  interactionType: UserInteractionType
  lastChangeTime: String!
  targetUser: User
  targetUserId: String!
}

type UserInteractionConnection {
  items: [UserInteraction]
  nextToken: String
}

enum Mood {
  Aroused
  AsUsual
  Drunk
  HardToExplain
  High
  Melancholic
  Relieved
}

enum Position {
  AllFours
  Kneeling
  Lying
  Sitting
  Squatting
  Standing
  Walking
}

enum ProfilePrivacy {
  Private
  Protected
  Public
}

enum StreamPrivacy {
  Private
  PrivateButWatching
  Protected
  Public
}

enum UncloggerHintCategory {
  Default
  DidYouKnow
  HistoricalEvent
  News
  PhilosophicalSchool
}

enum UserInteractionType {
  Block
  Watch
}

input CreateCommentInput {
  content: String
  streamId: String!
  time: String
  userId: String!
}

input CreateFlagInput {
  category: String!
  commentId: String
  detail: String!
  note: String
  reviewNote: String
  reviewStatus: String
  streamId: String
  time: String
  userId: String
}

input CreateLikeInput {
  streamId: String!
  time: String
  userId: String!
}

input CreateStreamInput {
  body: String!
  id: ID!
  isSealed: Int
  locationId: String
  mood: [Mood]
  position: [Position]
  privacy: StreamPrivacy!
  sealedAt: String
  startedAt: String!
  title: String
  track: String
  userId: String!
  visits: Int
}

input CreateUncloggerHintInput {
  content: String!
  id: ID!
}

input CreateUserInput {
  bio: String
  birthDate: String!
  createdAt: String
  email: String
  fullName: String
  id: ID!
  lastAccess: String
  locationId: String
  preferredName: String
  username: String!
}

input CreateUserInteractionInput {
  actorUserId: String!
  interactionType: UserInteractionType
  targetUserId: String!
}

input DeleteCommentInput {
  id: ID!
}

input DeleteFlagInput {
  id: ID!
}

input DeleteLikeInput {
  id: ID!
}

input DeleteStreamInput {
  id: ID!
}

input DeleteUncloggerHintInput {
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

input DeleteUserInteractionInput {
  id: ID!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFlagFilterInput {
  category: TableStringFilterInput
  detail: TableStringFilterInput
  id: TableIDFilterInput
  note: TableStringFilterInput
  reviewNote: TableStringFilterInput
  reviewStatus: TableStringFilterInput
  streamId: TableStringFilterInput
  time: TableStringFilterInput
  userId: TableStringFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateCommentInput {
  content: String
  id: ID!
  time: String
}

input UpdateFlagInput {
  category: String
  commentId: String
  detail: String
  id: ID!
  note: String
  reviewNote: String
  reviewStatus: String
  streamId: String
  time: String
  userId: String
}

input UpdateLikeInput {
  id: ID!
  time: String
}

input UpdateStreamInput {
  body: String
  id: ID!
  isSealed: Int
  locationId: String
  mood: [Mood]
  position: [Position]
  privacy: StreamPrivacy
  sealedAt: String
  startedAt: String
  title: String
  track: String
  visits: Int
}

input UpdateUncloggerHintInput {
  content: String
  id: ID!
}

input UpdateUserInput {
  allowDirectMesages: Boolean
  bio: String
  birthDate: String
  cognitoIdentityId: String
  createdAt: String
  email: String
  fullName: String
  id: ID!
  lastAccess: String
  locationId: String
  preferredName: String
  profilePictureKey: String
  profilePrivacy: ProfilePrivacy
  site: String
  theme: String
  username: String
}

input UpdateUserInteractionInput {
  actorUserId: String
  id: ID!
  interactionType: UserInteractionType
  lastChangeTime: String
  targetUserId: String
}
