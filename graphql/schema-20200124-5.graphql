schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# Q U E R I E S
type Query {
  # User
  getUserByUsername(username: String!): User
  listStreamsByUser(first: Int, after: String, userId: ID!): StreamConnection
  listLikesByUser(first: Int, after: String, userId: ID!): LikeConnection
  listUserInteractionsByActorUserIdIndex(actorUserId: String!, first: Int, after: String): UserInteractionConnection

  # Stream
  getStream(id: ID!): Stream
  listSealedStreams(first: Int, after: String): StreamConnection
  listLiveStreams(first: Int, after: String): StreamConnection @aws_auth(cognito_groups: ["tafalk-default-ug"])

  # User interaction
  queryUserInteractionsBetweenUsersByUserIdIndices(actorUserId: String!, targetUserId: String!): [UserInteraction]

  # Stream reaction
  listStreamLikes(streamId: ID!): [Like]
  listPaginatedStreamComments(streamId: ID!, first: Int, after: String): CommentConnection

  # Search
  search(query: String!): [SearchResult] @aws_auth(cognito_groups: ["tafalk-default-ug"])

  # Recaptcha V3 token
  getRecaptchaTokenResult(token: String!, ip: String): RecaptchaV3Result

  # Cantos
  getCanto(id: ID!): Canto
  listCantos(first: Int, after: String): CantoConnection

  # Canto Likes
  listCantoLikes(cantoId: ID!): [Like]

  # Flag
  listFlags(limit: Int, offset: Int, searchText: String, status: String): [Flag]
  countFlags(searchText: String, status: String): ResultCount

  # UncloggerPrompt
  listUncloggerPrompts(limit: Int, offset: Int, searchText: String, status: String): [UncloggerPrompt]
  countUncloggerPrompts(searchText: String, status: String): ResultCount
}

# M U T A T I O N S
type Mutation {
  # User
  updateUser(input: UpdateUserInput!): User @aws_auth(cognito_groups: ["tafalk-default-ug"])
  deleteUser(input: DeleteUserInput!): User

  # Stream
  createStream(input: CreateStreamInput!): Stream @aws_auth(cognito_groups: ["tafalk-default-ug"])
  updateStream(input: UpdateStreamInput!): Stream  @aws_auth(cognito_groups: ["tafalk-default-ug"])

  # User interaction
  createUserInteraction(input: CreateUserInteractionInput!): UserInteraction @aws_auth(cognito_groups: ["tafalk-default-ug"])
  deleteUserInteraction(input: DeleteUserInteractionInput!): UserInteraction @aws_auth(cognito_groups: ["tafalk-default-ug"])

  # Stream reaction
  createLike(input: CreateLikeInput!): Like @aws_auth(cognito_groups: ["tafalk-default-ug"])
  updateLikeIndices(input: UpdateLikeIndicesInput): Like @aws_auth(cognito_groups: ["tafalk-default-ug"]) 
  createComment(input: CreateCommentInput!): Comment @aws_auth(cognito_groups: ["tafalk-default-ug"])
  deleteLike(input: DeleteLikeInput!): Like @aws_auth(cognito_groups: ["tafalk-default-ug"])

  # Flag
  createFlag(input: CreateFlagInput!): Flag @aws_auth(cognito_groups: ["tafalk-default-ug"])
  updateFlagContent(input: UpdateFlagContentInput): Flag @aws_auth(cognito_groups: ["tafalk-default-ug"])
  updateFlagReview(input: UpdateFlagReviewInput): Flag @aws_auth(cognito_groups: ["tafalk-admin-ug"])
  deleteFlag(input: DeleteFlagInput!): Flag @aws_auth(cognito_groups: ["tafalk-default-ug"])

  # Canto
  createCanto(input: CreateCantoInput!): Canto @aws_auth(cognito_groups: ["tafalk-default-ug"])
  updateCanto(input: UpdateCantoInput!): Canto  @aws_auth(cognito_groups: ["tafalk-default-ug"])

  # UncloggerPrompt
  createUncloggerPrompt(input: CreateUncloggerPromptInput!): UncloggerPrompt @aws_auth(cognito_groups: ["tafalk-default-ug"])
  updateUncloggerPromptContent(input: UpdateUncloggerPromptContentInput!): UncloggerPrompt  @aws_auth(cognito_groups: ["tafalk-default-ug"])
  updateUncloggerPromptReview(input: UpdateUncloggerPromptReviewInput!): UncloggerPrompt  @aws_auth(cognito_groups: ["tafalk-admin-ug"])
  deleteUncloggerPrompt(input: DeleteUncloggerPromptInput!): UncloggerPrompt @aws_auth(cognito_groups: ["tafalk-default-ug"])
}

# S U B S C R I P T I O N S
type Subscription {
  onUpdateStream(id: ID!): Stream @aws_subscribe(mutations : ["updateStream"])
  onUpdateCanto(id: ID!): Canto @aws_subscribe(mutations : ["updateCanto"])
  onCreateOrDeleteLike(streamId: String cantoId: String): Like @aws_subscribe(mutations : ["createLike", "deleteLike", "updateLikeIndices"])
  onCreateOrDeleteFlag(contentId: String): Flag @aws_subscribe(mutations : ["createFlag", "deleteFlag"])
}

# I N T E R F A C E S
interface CommunityReaction {
  id: ID!
  time: String
  userId: String!
}

# U N I O N S
union SearchResult = Stream | Canto | User

# I N P U T S
# User
input UpdateUserInput {
  accountStatus: String
  allowDirectMessages: Boolean
  bio: String
  birthDate: String
  cognitoIdentityId: String
  createdAt: String
  email: String
  fullName: String
  id: ID!
  lastAccess: String
  location: String
  preferredName: String
  language: Language
  profilePictureKey: String
  site: String
  theme: String
  username: String
}

input DeleteUserInput {
  id: ID!
}

# Stream
input CreateStreamInput {
  body: String!
  id: ID!
  isSealed: Int
  location: String
  mood: [Mood]
  position: [Position]
  privacy: StreamPrivacy!
  sealTime: String
  startTime: String!
  title: String
  track: String
  userId: String!
}

input UpdateStreamInput {
  body: String
  id: ID!
  isSealed: Int
  location: String
  mood: [Mood]
  position: [Position]
  privacy: StreamPrivacy
  sealTime: String
  startTime: String
  title: String
  track: String
}

# Canto
input CreateCantoInput {
  id: ID!
  body: String
  startTime: String!
  lastUpdateTime: String
  status: String!
}

input UpdateCantoInput {
  id: ID!
  body: String!
  lastUpdateTime: String!
}

# User interaction
input CreateUserInteractionInput {
  actorUserId: String!
  interactionType: UserInteractionType
  targetUserId: String!
}

input DeleteUserInteractionInput {
  id: ID!
}

# Stream / Canto reaction
input CreateLikeInput {
  streamId: String
  cantoId: String
  indices: String
  time: String
  userId: String!
}

input UpdateLikeIndicesInput {
  id: ID!
  indices: String!
  time: String!
}

input CreateCommentInput {
  content: String
  streamId: String!
  time: String
  userId: String!
}

input DeleteLikeInput {
  id: ID!
}

# Flag
input CreateFlagInput {
  contentType: String!
  contentId: String
  flaggerUserId: String!
  category: String!
  type: String!
  detail: String
}

input UpdateFlagContentInput {
  id: ID!
  category: String
  type: String
  detail: String
}

input UpdateFlagReviewInput {
  id: ID!
  reviewerUserId: String
  status: ApprovalStatus
  reviewNote: String
}

input DeleteFlagInput {
  id: ID!
}

# UncloggerPrompt
input CreateUncloggerPromptInput {
  category: UncloggerPromptCategory!
  body: String!
  language: Language
  status: ApprovalStatus
  creatorUserId: String
}

input UpdateUncloggerPromptContentInput {
  id: ID!
  category: UncloggerPromptCategory
  body: String
  language: Language
  status: ApprovalStatus
}

input UpdateUncloggerPromptReviewInput {
  id: ID!
  reviewerUserId: String
  status: ApprovalStatus
  reviewNote: String
}

input DeleteUncloggerPromptInput {
  id: ID!
}

# T Y P E S
type User {
  accountStatus: String
  allowDirectMessages: Boolean
  bio: String
  birthDate: String!
  cognitoIdentityId: String
  comments: CommentConnection
  createdAt: String
  email: String
  id: ID!
  lastAccess: String
  likedStreams: LikeConnection
  location: String
  preferredName: String
  language: Language
  profilePictureKey: String
  site: String
  canto: Canto
  streams: StreamConnection
  theme: String
  userInteractions: UserInteractionConnection
  username: String!
}

type Stream {
  body: String!
  comments: [Comment]
  flags: [Flag]
  id: ID!
  isSealed: Int
  likes: [Like]
  location: String
  mood: [Mood]
  position: [Position]
  privacy: StreamPrivacy!
  sealTime: String
  startTime: String!
  title: String
  track: String
  uncloggerPromptId: String
  user: User
  userId: String!
}

type Canto {
  id: ID!
  body: String!
  flags: [Flag]
  likes: [Like]
  startTime: String!
  lastUpdateTime: String
  status: String
  user: User
}

type UserInteraction {
  id: ID!
  actorUserId: String!
  actorUser: User
  targetUserId: String!
  targetUser: User
  interactionType: UserInteractionType
  lastChangeTime: String!
}

type Like implements CommunityReaction {
  id: ID!
  stream: Stream
  streamId: String
  canto: Canto
  cantoId: String  
  time: String
  indices: String
  userId: String!
}

type Comment implements CommunityReaction {
  content: String
  flags: [Flag]
  id: ID!
  streamId: String!
  time: String
  user: User
  userId: String!
}

type Flag {
  id: ID!
  contentType: String!
  contentId: String
  flaggerUserId: String!
  flaggerUser: User
  category: String!
  type: String!
  detail: String
  reviewerUserId: String
  reviewerUser: User
  status: String
  reviewNote: String
  createTime: String
  reviewTime: String
  lastUpdateTime: String
}

type RecaptchaV3Result {
  challengeTimestamp: String
  errorCodes: [String]
  hostname: String
  success: Boolean
}

type UncloggerPrompt {
  id: ID!
  category: UncloggerPromptCategory!
  body: String!
  language: Language
  status: ApprovalStatus
  creatorUserId: String
  creatorUser: User
  createTime: String
  reviewerUserId: String
  reviewerUser: User
  reviewNote: String
  reviewTime: String
}

type ResultCount {
  count: Int
}

# C O N N E C T I O N   T Y P E S
type StreamConnection {
  items: [Stream]
  nextToken: String
}

type CantoConnection {
  items: [Canto]
  nextToken: String
}

type UserInteractionConnection {
  items: [UserInteraction]
  nextToken: String
}

type LikeConnection {
  items: [Like]
  nextToken: String
}

type CommentConnection {
  items: [Comment]
  nextToken: String
}

# E N U M S
enum Mood {
  Aroused
  AsUsual
  Drunk
  HardToExplain
  High
  Melancholic
  Relieved
}

enum Position {
  AllFours
  Kneeling
  Lying
  Sitting
  Squatting
  Standing
  Walking
}

enum StreamPrivacy {
  Private
  PrivateButWatching
  Protected
  Public
}

enum UncloggerPromptCategory {
  Trivia
  HistoricalEvent
  News
  PhilosophySchools
  Other
}

enum UserInteractionType {
  Block
  Watch
}

enum Language {
  en
  tr
}

enum ApprovalStatus {
  Pending
  Declined
  Accepted
  OnHold
}
