Description: Root level stack
Parameters:
  ProjectIdentifierName:
    Description: An prefix that will be added to resource names (e.g. project name)
    Type: String
    MinLength: 3
    MaxLength: 10
    Default: tafalk
    ConstraintDescription: must be between 3 and 10 characters.
  EnvironmentName:
    Description: An environment name that will be added to resource names
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    Default: dev
    ConstraintDescription: must specify 'dev', 'test' or 'prod'.
  KeyName:
    Description: Name of an existing EC2 KeyPair (if NAT)
    Type: AWS::EC2::KeyPair::KeyName
  NatInstanceRequirement:
    Description: Should the resources NAT instance created? if so, single or multi-AZ?
    Type: String
    AllowedValues:
      - none
      - single-az
      - multi-az
    Default: none
  TemplateS3BucketName:
    Description: The bucket name at which the templates reside
    Type: String
    Default: tafalk-cloudformation-templates
  # Networking
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/28
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.128/28
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateSupportSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the support private subnet (DB, cache etc.) in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateSupportSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the support private subnet (DB, cache etc.) in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateComputeSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the compute private subnet (Lambda, EC2 etc.) in the first Availability Zone
    Type: String
    Default: 10.0.4.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateComputeSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the compute private subnet (Lambda, EC2 etc.) in the second Availability Zone
    Type: String
    Default: 10.0.5.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  # Repositories
  GitHubOwner:
    Type: String
    Default: tafalk
    Description: The name of the GitHub user or organization who owns the GitHub repository.
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 40
    MaxLength: 40
    AllowedPattern: "[a-z0-9]*"
  CognitoUserExporterFunctionRepositoryName:
    Description: Repository name for post-confirm user importer function
    Type: String
    Default: cognito-user-exporter-function
  TokenResolverFunctionRepositoryName:
    Description: Repository name for token resolver function
    Type: String
    Default: recaptcha-token-resolver-function
  ResourceSearcherFunctionRepositoryName:
    Description: Repository name for resource searcher function
    Type: String
    Default: resource-searcher-function
  CertificateDelegatingFunctionRepositoryName:
    Description: Repository name for ACM certificate delegating function
    Type: String
    Default: certificate-delegating-function
  SitePoliciesRepositoryName:
    Description: Repository name for site policies
    Type: String
    Default: site-policies
  SiteFilesRepositoryName:
    Description: Repository name for site files
    Type: String
    Default: site-files
  RdsBootstrapFunctionRepositoryName:
    Description: Repository name for RDS Bootstrap function
    Type: String
    Default: rds-bootstrap-function
  EmptyContentCleanserFunctionRepositoryName:
    Description: Repository name for empty-content cleanser function
    Type: String
    Default: empty-content-cleanser-function
  RepositoryBranchName:
    Description: CodeCommit branch name for having builds
    Type: String
    Default: master
  # Recaptcha
  RecaptchaSecret:
    Description: The Recaptcha V3 Secret of the application
    Type: String
    Default: 6Lcro5kUAAAAAFkv0SSu_C89ovz9M_vYxA9FQujJ
  RecaptchaVerifyEndpoint:
    Description: The Recaptcha V3 verification endpoint
    Type: String
    Default: https://www.google.com/recaptcha/api/siteverify
  # Web Serving
  WebServingRequirement:
    Description: Should the serving S3 buckets, Cloudformation, Certificate and Route53 Hosted Zone created?
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  DomainName:
    Description: The naked domain name for the website
    Type: String
    Default: tafalk.com
  ZohoCname:
    Description: CNAME prefix for ZohoMail Domain verification
    Type: String
    Default: zb15470678
  CertificateRegion:
    Description: The region in which the SSL cert for the domain be created
    Type: String
    AllowedValues:
      - us-east-1
    Default: us-east-1
    ConstraintDescription: AWS needs cert to be strictly in N.Virgina for Cloudfront usage
  # RDS
  AuroraMysqlEngineVersion:
    Description: The version of the AWS Aurora Engine for MySql
    Type: String
    Default: "5.6.10a"
  AuroraMysqlMasterUsername:
    Description: The username for the AWS Aurora DB
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$
    Type: String
    Default: root
    MinLength: 1
    MaxLength: 16
  AuroraMysqlMasterUserPassword:
    Description: The username for the AWS Aurora DB
    AllowedPattern: ^[a-zA-Z0-9]+$
    ConstraintDescription: Must be between 8 to 41 alphanumeric characters.
    Type: String
    MinLength: 8
    MaxLength: 41
    NoEcho: true

Conditions:
  CreateWebServing: !Equals [!Ref WebServingRequirement, "true"]

Resources:
  ## Parameter Store
  # Recaptcha
  RecaptchaSecretParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RecaptchaSecret
      Type: String
      Value: !Ref RecaptchaSecret
      Description: "The Recaptcha Secret"

  ## Secrets Manager
  # Github
  FunctionGithubOauthTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "/${EnvironmentName}/FunctionGithubOauthTokenSecret"
      Description: This is a secret for the Github Personal Access Token
      SecretString: !Sub '{"token":"${GitHubOAuthToken}"}'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName
  # RDS
  AuroraMysqlAppCredentialSecretStore:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AuroraMysqlAppCredentialSecretStore
      Description: Secret Store for RDS
      SecretString: !Sub '{"username":"${AuroraMysqlMasterUsername}","password":"${AuroraMysqlMasterUserPassword}"}'
      Tags:
        - Key: Name
          Value: AuroraMysqlAppCredentialSecretStore
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: !Ref ProjectIdentifierName

  # Nested Stacks
  IAM:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateS3BucketName}.s3.${AWS::Region}.amazonaws.com/iam.yaml
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        ApprovalDbClusterIdentifier: approvalcluster-1
        InteractionDbClusterIdentifier: interactioncluster-1

  Network:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateS3BucketName}.s3.${AWS::Region}.amazonaws.com/network.yaml
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        KeyName: !Ref KeyName
        VpcCIDR: !Ref VpcCIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        PrivateSupportSubnet1CIDR: !Ref PrivateSupportSubnet1CIDR
        PrivateSupportSubnet2CIDR: !Ref PrivateSupportSubnet2CIDR
        PrivateComputeSubnet1CIDR: !Ref PrivateComputeSubnet1CIDR
        PrivateComputeSubnet2CIDR: !Ref PrivateComputeSubnet2CIDR
        NatInstanceRequirement: !Ref NatInstanceRequirement

  Data:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateS3BucketName}.s3.${AWS::Region}.amazonaws.com/data.yaml
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        AuroraMysqlEngineVersion: !Ref AuroraMysqlEngineVersion
        AuroraMysqlMasterUsername: !Ref AuroraMysqlMasterUsername
        AuroraMysqlMasterUserPassword: !Ref AuroraMysqlMasterUserPassword
        ApprovalDbClusterIdentifier: approvalcluster-1
        ApprovalDbName: !Sub ${EnvironmentName}_ApprovalDb
        InteractionDbClusterIdentifier: interactioncluster-1
        InteractionDbName: !Sub ${EnvironmentName}_InteractionDb
        AuroraMysqlDBSubnetGroupNames: !Join
          - ","
          - - Fn::GetAtt: [Network, Outputs.PrivateSupportSubnet1]
            - Fn::GetAtt: [Network, Outputs.PrivateSupportSubnet2]

  Storage:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateS3BucketName}.s3.${AWS::Region}.amazonaws.com/storage.yaml
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        LambdaFunctionArtifactStoreBucketName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-lambda-zips"
        UserFileBucketName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-userfiles"
        SiteFileBucketName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-sitefiles"
        SitePoliciesBucketName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-site-policies"

  LambdaFunctionCICDPipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateS3BucketName}.s3.${AWS::Region}.amazonaws.com/build.yaml
      Parameters:
        # Common
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        BranchName: !Ref RepositoryBranchName
        LambdaArtifactStoreBucket:
          Fn::GetAtt: [Storage, Outputs.FunctionDeploymentsBucket]
        CodeBuildRoleArn:
          Fn::GetAtt: [IAM, Outputs.CodeBuildRoleArn]
        CodePipelineRoleArn:
          Fn::GetAtt: [IAM, Outputs.CodePipelineRoleArn]
        LambdaManagerCloudFormationRoleArn:
          Fn::GetAtt: [IAM, Outputs.LambdaManagerCloudFormationRoleArn]
        GitHubOwner: !Ref GitHubOwner
        FunctionGithubOauthTokenSecret: !Ref FunctionGithubOauthTokenSecret
        # CognitoUserExporter
        CognitoUserExporterFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-cognito-user-exporter"
        CognitoUserExporterFunctionRepositoryName: !Ref CognitoUserExporterFunctionRepositoryName
        UserTable:
          Fn::GetAtt: [Data, Outputs.UserTable]
        UserGroup: !Sub "${ProjectIdentifierName}-default-ug"
        # EmptyContentCleanser
        EmptyContentCleanserFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-empty-content-cleanser"
        EmptyContentCleanserFunctionRepositoryName: !Ref EmptyContentCleanserFunctionRepositoryName
        StreamTableIsSealedStartTimeIndex:
            Fn::GetAtt: [Data, Outputs.StreamTableIsSealedStartTimeIndex]
        # Token Resolver
        RecaptchaTokenResolverFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-token-resolver"
        RecaptchaTokenResolverFunctionRepositoryName: !Ref TokenResolverFunctionRepositoryName
        RecaptchaSecretName: !Ref RecaptchaSecretParam
        RecaptchaVerifyEndpoint: !Ref RecaptchaVerifyEndpoint
        # Resource Searcher
        ResourceSearcherFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-resource-searcher"
        ResourceSearcherFunctionRepositoryName: !Ref ResourceSearcherFunctionRepositoryName
        StreamTable:
          Fn::GetAtt: [Data, Outputs.StreamTable]
        CantoTable:
          Fn::GetAtt: [Data, Outputs.CantoTable]
        # Certificate Delegating
        CertificateDelegatingFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-certificate-delegate"
        CertificateDelegatingFunctionRepositoryName: !Ref CertificateDelegatingFunctionRepositoryName
        AcmCertRegion: !Ref CertificateRegion
        # RDS
        AuroraMysqlCredentialsSecret: !Ref AuroraMysqlAppCredentialSecretStore
        RdsBootstrapFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-rds-bootstrapper"
        RdsBootstrapFunctionRepositoryName: !Ref RdsBootstrapFunctionRepositoryName

        ApprovalDbClusterArn: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Data.Outputs.ApprovalDbCluster}
        ApprovalDbClusterEndpointAddress:
          Fn::GetAtt: [Data, Outputs.ApprovalDbClusterEndpointAddress]
        ApprovalDbClusterEndpointPort:
          Fn::GetAtt: [Data, Outputs.ApprovalDbClusterEndpointPort]
        ApprovalDbName: !Sub ${EnvironmentName}_ApprovalDb
        ApprovalDbSchemaName: Review
        FlagTableName: Flags
        UncloggerPromptTableName: UncloggerPrompts

        InteractionDbClusterArn: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Data.Outputs.InteractionDbCluster}
        InteractionDbClusterEndpointAddress:
          Fn::GetAtt: [Data, Outputs.InteractionDbClusterEndpointAddress]
        InteractionDbClusterEndpointPort:
          Fn::GetAtt: [Data, Outputs.InteractionDbClusterEndpointPort]
        InteractionDbName: !Sub ${EnvironmentName}_InteractionDb
        InteractionDbSchemaName: Reaction
        UserInteractionTableName: UserInteractions
        ContentInteractionTableName: ContentInteractions
        CommentTableName: Comments

        # Site Policies
        SitePoliciesRepositoryName: !Ref SitePoliciesRepositoryName
        SitePoliciesBucketName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-site-policies"
        # Site Files
        SiteFilesRepositoryName: !Ref SiteFilesRepositoryName
        SiteFilesBucketName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-sitefiles"

  CognitoAuth:
    Type: AWS::CloudFormation::Stack
    DependsOn: LambdaFunctionCICDPipeline
    Properties:
      TemplateURL: !Sub https://${TemplateS3BucketName}.s3.${AWS::Region}.amazonaws.com/cognito-auth.yaml
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        # Should be the same as FunctionName of LambdaFunctionCICDPipeline Stack
        CognitoUserExporterFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-cognito-user-exporter"
        SNSRoleArn:
          Fn::GetAtt: [IAM, Outputs.SNSRoleArn]
        # Should be the same as UserGroup of LambdaFunctionCICDPipeline Stack
        DefaultUserGroupName: !Sub "${ProjectIdentifierName}-default-ug"
        AdminUserGroupName: !Sub "${ProjectIdentifierName}-admin-ug"
        UserFilesBucketArn:
          Fn::GetAtt: [Storage, Outputs.UserFilesBucketArn]

  AppSync:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateS3BucketName}.s3.${AWS::Region}.amazonaws.com/appsync.yaml
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        ResourceBucketName: !Ref TemplateS3BucketName
        UserPoolId:
          Fn::GetAtt: [CognitoAuth, Outputs.UserPoolId]
        AppSyncLogRoleArn:
          Fn::GetAtt: [IAM, Outputs.AppSyncLogRoleArn]
        AppSyncResourceDynamoDbRoleArn:
          Fn::GetAtt: [IAM, Outputs.AppSyncResourceDynamoDbRoleArn]
        AppSyncResourceAuroraRoleArn:
          Fn::GetAtt: [IAM, Outputs.AppSyncResourceAuroraRoleArn]
        AppSyncResourceLambdaRoleArn:
          Fn::GetAtt: [IAM, Outputs.AppSyncResourceLambdaRoleArn]
        UserTableName:
          Fn::GetAtt: [Data, Outputs.UserTable]
        CantoTableName:
          Fn::GetAtt: [Data, Outputs.CantoTable]
        StreamTableName:
          Fn::GetAtt: [Data, Outputs.StreamTable]
        ApprovalDbClusterIdentifier: approvalcluster-1
        ApprovalDbName: !Sub ${EnvironmentName}_ApprovalDb
        InteractionDbClusterIdentifier: interactioncluster-1
        InteractionDbName: !Sub ${EnvironmentName}_InteractionDb
        AuroraMysqlCredentialsSecret: !Ref AuroraMysqlAppCredentialSecretStore
        RecaptchaTokenResolverFunctionArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectIdentifierName}-${EnvironmentName}-token-resolver"
        ResourceSearcherFunctionArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectIdentifierName}-${EnvironmentName}-resource-searcher"

  WebServing:
    Type: AWS::CloudFormation::Stack
    Condition: CreateWebServing
    Properties:
      TemplateURL: !Sub https://${TemplateS3BucketName}.s3.${AWS::Region}.amazonaws.com/webserving.yaml
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        DomainName: !Ref DomainName
        ZohoCname: !Ref ZohoCname
        CertificateDelegatingFunctionArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectIdentifierName}-${EnvironmentName}-certificate-delegate"
