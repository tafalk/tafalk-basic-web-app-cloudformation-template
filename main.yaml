Description:
  Root level stack
Parameters:
  ProjectIdentifierName:
    Description: An prefix that will be added to resource names (e.g. project name)
    Type: String
    MinLength: 3
    MaxLength: 10
    ConstraintDescription: must be between 3 and 10 characters.
  EnvironmentName:
    Description: An environment name that will be added to resource names
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    Default: dev
    ConstraintDescription: must specify 'dev', 'test' or 'prod'.
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/28
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.128/28
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateSupportSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the support private subnet (DB, cache etc.) in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateSupportSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the support private subnet (DB, cache etc.) in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateComputeSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the compute private subnet (Lambda, EC2 etc.) in the first Availability Zone
    Type: String
    Default: 10.0.4.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateComputeSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the compute private subnet (Lambda, EC2 etc.) in the second Availability Zone
    Type: String
    Default: 10.0.5.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  IsHighAvailable:
    Description: Should the resources (i.e. NAT instance) created multi-AZ?
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
    ConstraintDescription: must specify true or false.
  CognitoUserExporterFunctionRepositoryName:
    Description: CodeCommit repository for post-confirm user importer function
    Type: String
    Default: cognito-user-exporter-function
  PlaceFinderFunctionRepositoryName:
    Description: CodeCommit repository for place finder function
    Type: String
    Default: place-getter-function
  TokenResolverFunctionRepositoryName:
    Description: CodeCommit repository for token resolver function
    Type: String
    Default: recaptcha-token-resolver-function
  ResourceSearcherFunctionRepositoryName:
    Description: CodeCommit repository for resource searcher function
    Type: String
    Default: resource-searcher-function
  RepositoryBranchName:
    Description: CodeCommit branch name for having builds
    Type: String
    Default: master
  TemplateS3Bucket:
    Description: The bucket address at which the templates reside
    Type: String
    Default: https://s3.eu-central-1.amazonaws.com/tafalk-cf-templates
  GooglePlacesApiKey:
    Description: The API Key to reach Google Places API
    Type: String
    Default: AIzaSyCi8K1mwjvbvUUEQ6CEWkxV-jQmhCRhTxI
  RecaptchaSecret:
    Description: The Recaptcha V3 Secret of the application
    Type: String
    Default: 6Lcro5kUAAAAAFkv0SSu_C89ovz9M_vYxA9FQujJ
  RecaptchaVerifyEndpoint:
    Description: The Recaptcha V3 verification endpoint
    Type: String
    Default: https://www.google.com/recaptcha/api/siteverify
Resources:
  GooglePlacesApiKeyParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: GooglePlacesApiKey
      Type: String
      Value: !Ref GooglePlacesApiKey
      Description: "The API Key to reach Google Places API"
  RecaptchaSecretParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RecaptchaSecret
      Type: String
      Value: !Ref RecaptchaSecret
      Description: "The Recaptcha Secret"

  # Nested Stacks
  IAM:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "iam.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName

  Network:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "network.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        KeyName: !Ref KeyName
        VpcCIDR: !Ref VpcCIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        PrivateSupportSubnet1CIDR: !Ref PrivateSupportSubnet1CIDR
        PrivateSupportSubnet2CIDR: !Ref PrivateSupportSubnet2CIDR
        PrivateComputeSubnet1CIDR: !Ref PrivateComputeSubnet1CIDR
        PrivateComputeSubnet2CIDR: !Ref PrivateComputeSubnet2CIDR
        IsHighAvailable: !Ref IsHighAvailable

  Data:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "data.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        CacheSubnetName:
          Fn::GetAtt: [Network, Outputs.PrivateSupportSubnet1]
        CacheVPCSecurityGroupId:
          Fn::GetAtt: [Network, Outputs.CacheSecurityGroupId]

  Storage:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "storage.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        LambdaFunctionArtifactStoreBucketName: !Sub "${ProjectIdentifierName}-lambda-zips-2019"

  LambdaFunctionCICDPipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "build.yaml"]]
      Parameters:
        # Common
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        BranchName: !Ref RepositoryBranchName
        LambdaArtifactStoreBucket:
          Fn::GetAtt: [Storage, Outputs.FunctionDeploymentsBucket]
        CodeCommitRepoCodeBuildRoleArn:
          Fn::GetAtt: [IAM, Outputs.CodeBuildRoleArn]
        CodeCommitRepoCodePipelineRoleArn:
          Fn::GetAtt: [IAM, Outputs.CodePipelineRoleArn]
        LambdaManagerCloudFormationRoleArn:
          Fn::GetAtt: [IAM, Outputs.LambdaManagerCloudFormationRoleArn]
        # CognitoUserExporter
        CognitoUserExporterFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-cognito-user-exporter"
        CognitoUserExporterFunctionRepositoryName: !Ref CognitoUserExporterFunctionRepositoryName
        UserTable:
          Fn::GetAtt: [Data, Outputs.UserTable]
        StreamTable:
          Fn::GetAtt: [Data, Outputs.StreamTable]
        UserGroup: !Sub "${ProjectIdentifierName}-${EnvironmentName}-default-ug"
        # Place Finder
        PlaceFinderFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-place-finder"
        PlaceFinderFunctionRepositoryName: !Ref PlaceFinderFunctionRepositoryName
        PlacesCacheEndpoint:
          Fn::GetAtt: [Data, Outputs.PlacesCacheEndpoint]
        PlacesCachePort:
          Fn::GetAtt: [Data, Outputs.PlacesCachePort]
        GooglePlacesApiKeyName: !Ref GooglePlacesApiKeyParam
        # Token Resolver
        RecaptchaTokenResolverFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-token-resolver"
        RecaptchaTokenResolverFunctionRepositoryName: !Ref TokenResolverFunctionRepositoryName
        RecaptchaSecretName: !Ref RecaptchaSecretParam
        RecaptchaVerifyEndpoint: !Ref RecaptchaVerifyEndpoint
        # Resource Searcher
        ResourceSearcherFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-resource-searcher"
        ResourceSearcherFunctionRepositoryName: !Ref ResourceSearcherFunctionRepositoryName

  CognitoAuth:
    Type: AWS::CloudFormation::Stack
    DependsOn: LambdaFunctionCICDPipeline
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "cognito-auth.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        # Should be the same as FunctionName of LambdaFunctionCICDPipeline Stack
        CognitoUserExporterFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-cognito-user-exporter"
        SNSRoleArn:
          Fn::GetAtt: [IAM, Outputs.SNSRoleArn]
        # Should be the same as UserGroup of LambdaFunctionCICDPipeline Stack
        DefaultUserGroupName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-default-ug"

  AppSync:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "appsync.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        AppSyncLogRoleArn:
          Fn::GetAtt: [IAM, Outputs.AppSyncLogRoleArn]
