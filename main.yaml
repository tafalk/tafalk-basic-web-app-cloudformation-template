Description:
  Root level stack
Parameters:
  ProjectIdentifierName:
    Description: An prefix that will be added to resource names (e.g. project name)
    Type: String
    MinLength: 3
    MaxLength: 10
    Default: tafalk
    ConstraintDescription: must be between 3 and 10 characters.
  EnvironmentName:
    Description: An environment name that will be added to resource names
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    Default: dev
    ConstraintDescription: must specify 'dev', 'test' or 'prod'.
  KeyName:
    Description: Name of an existing EC2 KeyPair (if NAT)
    Type: AWS::EC2::KeyPair::KeyName
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/28
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.128/28
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateSupportSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the support private subnet (DB, cache etc.) in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateSupportSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the support private subnet (DB, cache etc.) in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateComputeSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the compute private subnet (Lambda, EC2 etc.) in the first Availability Zone
    Type: String
    Default: 10.0.4.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  PrivateComputeSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the compute private subnet (Lambda, EC2 etc.) in the second Availability Zone
    Type: String
    Default: 10.0.5.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : Must be a valid CIDR range of the form x.x.x.x/x.
  NatInstanceRequirement:
    Description: Should the resources NAT instance created? if so, single or multi-AZ?
    Type: String
    AllowedValues:
      - none
      - single-az
      - multi-az
    Default: none
  WebServingRequirement:
    Description: Should the serving S3 buckets, Cloudformation, Certificate and Route53 Hosted Zone created?
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  CognitoUserExporterFunctionRepositoryName:
    Description: CodeCommit repository for post-confirm user importer function
    Type: String
    Default: cognito-user-exporter-function
  TokenResolverFunctionRepositoryName:
    Description: CodeCommit repository for token resolver function
    Type: String
    Default: recaptcha-token-resolver-function
  ResourceSearcherFunctionRepositoryName:
    Description: CodeCommit repository for resource searcher function
    Type: String
    Default: resource-searcher-function
  CertificateDelegatingFunctionRepositoryName:
    Description: CodeCommit repository for ACM certificate delegating function
    Type: String
    Default: certificate-delegating-function
  SitePoliciesRepositoryName:
    Description: CodeCommit repository for site policies
    Type: String
    Default: site-policies
  RepositoryBranchName:
    Description: CodeCommit branch name for having builds
    Type: String
    Default: master
  TemplateS3Bucket:
    Description: The bucket address at which the templates reside
    Type: String
    Default: https://s3.eu-central-1.amazonaws.com/tafalk-cf-templates
  RecaptchaSecret:
    Description: The Recaptcha V3 Secret of the application
    Type: String
    Default: 6Lcro5kUAAAAAFkv0SSu_C89ovz9M_vYxA9FQujJ
  RecaptchaVerifyEndpoint:
    Description: The Recaptcha V3 verification endpoint
    Type: String
    Default: https://www.google.com/recaptcha/api/siteverify
  DomainName:
    Description: The naked domain name for the website
    Type: String
    Default: tafalk.com
  ZohoCname:
    Description: CNAME prefix for ZohoMail Domain verification
    Type: String
    Default: zb15470678
  ResourceBucketName:
    Description: The name of the S3 bucket containing the templates and the graphql schemas
    Type: String
    Default: tafalk-cf-templates
  CertificateRegion:
    Description: The region in which the SSL cert for the domain be created
    Type: String
    AllowedValues:
      - us-east-1
    Default: us-east-1
    ConstraintDescription : AWS needs cert to be strictly in N.Virgina for Cloudfront usage
  AuroraMysqlEngineVersion:
    Description: The version of the AWS Aurora Engine for MySql
    Type: String
    Default: '5.6'
  AuroraMysqlMasterUsername:
    Description: The username for the AWS Aurora DB
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$
    Type: String
    Default: root
    MinLength: 1
    MaxLength: 16
  AuroraMysqlMasterUserPassword:
    Description: The username for the AWS Aurora DB
    AllowedPattern: ^[a-zA-Z0-9]+$
    ConstraintDescription: Must be between 8 to 41 alphanumeric characters.
    Type: String
    MinLength: 8
    MaxLength: 41
    NoEcho: true
  RdsBootstrapFunctionRepositoryName:
    Description: CodeCommit repository for RDS Bootstrap function
    Type: String
    Default: rds-bootstrap-function

Conditions:
  CreateWebServing: !Equals [ !Ref WebServingRequirement, "true" ]

Resources:

  # Parameter Store
  RecaptchaSecretParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RecaptchaSecret
      Type: String
      Value: !Ref RecaptchaSecret
      Description: "The Recaptcha Secret"
  AuroraMysqlMasterUsernameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AuroraMysqlMasterUsername
      Type: String
      Value: !Ref AuroraMysqlMasterUsername
      Description: "The Aurora Mysql Master Username Secret"
  AuroraMysqlMasterUserPasswordParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AuroraMysqlMasterUserPassword
      Type: String
      Value: !Ref AuroraMysqlMasterUserPassword
      Description: "The Aurora Mysql Master User Password Secret"

  # Nested Stacks
  IAM:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "iam.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName

  Network:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "network.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        KeyName: !Ref KeyName
        VpcCIDR: !Ref VpcCIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        PrivateSupportSubnet1CIDR: !Ref PrivateSupportSubnet1CIDR
        PrivateSupportSubnet2CIDR: !Ref PrivateSupportSubnet2CIDR
        PrivateComputeSubnet1CIDR: !Ref PrivateComputeSubnet1CIDR
        PrivateComputeSubnet2CIDR: !Ref PrivateComputeSubnet2CIDR
        NatInstanceRequirement: !Ref NatInstanceRequirement

  Data:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "data.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        AuroraMysqlEngineVersion: !Ref AuroraMysqlEngineVersion
        AuroraMysqlMasterUsername: !Ref AuroraMysqlMasterUsername
        AuroraMysqlMasterUserPassword: !Ref AuroraMysqlMasterUserPassword
        AuroraMysqlDBSubnetGroupNames:
          !Join
            - ","
            - - Fn::GetAtt: [Network, Outputs.PrivateSupportSubnet1]
              - Fn::GetAtt: [Network, Outputs.PrivateSupportSubnet2]

  Storage:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "storage.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        LambdaFunctionArtifactStoreBucketName: !Sub "${ProjectIdentifierName}-lambda-zips-2019"
        UserFileBucketName: !Sub "${ProjectIdentifierName}-userfiles"
        SitePoliciesBucketName: !Sub "${ProjectIdentifierName}-site-policies"

  LambdaFunctionCICDPipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "build.yaml"]]
      Parameters:
        # Common
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        BranchName: !Ref RepositoryBranchName
        LambdaArtifactStoreBucket:
          Fn::GetAtt: [Storage, Outputs.FunctionDeploymentsBucket]
        CodeCommitRepoCodeBuildRoleArn:
          Fn::GetAtt: [IAM, Outputs.CodeBuildRoleArn]
        CodeCommitRepoCodePipelineRoleArn:
          Fn::GetAtt: [IAM, Outputs.CodePipelineRoleArn]
        LambdaManagerCloudFormationRoleArn:
          Fn::GetAtt: [IAM, Outputs.LambdaManagerCloudFormationRoleArn]
        # CognitoUserExporter
        CognitoUserExporterFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-cognito-user-exporter"
        CognitoUserExporterFunctionRepositoryName: !Ref CognitoUserExporterFunctionRepositoryName
        UserTable:
          Fn::GetAtt: [Data, Outputs.UserTable]
        UserGroup: !Sub "${ProjectIdentifierName}-default-ug"
        # Token Resolver
        RecaptchaTokenResolverFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-token-resolver"
        RecaptchaTokenResolverFunctionRepositoryName: !Ref TokenResolverFunctionRepositoryName
        RecaptchaSecretName: !Ref RecaptchaSecretParam
        RecaptchaVerifyEndpoint: !Ref RecaptchaVerifyEndpoint
        # Resource Searcher
        ResourceSearcherFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-resource-searcher"
        ResourceSearcherFunctionRepositoryName: !Ref ResourceSearcherFunctionRepositoryName
        StreamTable:
          Fn::GetAtt: [Data, Outputs.StreamTable]
        CantoTable:
          Fn::GetAtt: [Data, Outputs.CantoTable]
        # Certificate Delegating
        CertificateDelegatingFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-certificate-delegate"
        CertificateDelegatingFunctionRepositoryName: !Ref CertificateDelegatingFunctionRepositoryName
        AcmCertRegion: !Ref CertificateRegion
        # Site Policies
        SitePoliciesRepositoryName: !Ref SitePoliciesRepositoryName
        SitePoliciesBucketName: !Sub "${ProjectIdentifierName}-site-policies"

  RDSBootstrap:
    Type: AWS::CloudFormation::Stack
    DependsOn: Data
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "rds-bootstrap.yaml"]]
      Parameters:
        # Common
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        # Pipeline Common
        BranchName: !Ref RepositoryBranchName
        LambdaArtifactStoreBucket:
          Fn::GetAtt: [Storage, Outputs.FunctionDeploymentsBucket]
        CodeCommitRepoCodeBuildRoleArn:
          Fn::GetAtt: [IAM, Outputs.CodeBuildRoleArn]
        CodeCommitRepoCodePipelineRoleArn:
          Fn::GetAtt: [IAM, Outputs.CodePipelineRoleArn]
        LambdaManagerCloudFormationRoleArn:
          Fn::GetAtt: [IAM, Outputs.LambdaManagerCloudFormationRoleArn]
        # Custom Resource Function
        RdsBootstrapFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-rds-bootstrap"
        RdsBootstrapFunctionRepositoryName: !Ref RdsBootstrapFunctionRepositoryName
        AuroraMysqlEndpoint:
          Fn::GetAtt: [Data, Outputs.ApprovalDbClusterEndpointAddress]
        AuroraMysqlPort:
          Fn::GetAtt: [Data, Outputs.ApprovalDbClusterEndpointPort]
        AuroraMysqlApprovalDbName:
          Fn::GetAtt: [Data, Outputs.ApprovalDbClusterName]
        FlagTableName: Flags
        UncloggerPromptTableName: UncloggerPrompts
        AuroraMysqlMasterUsernameSecretName: !Ref AuroraMysqlMasterUsernameParam
        AuroraMysqlMasterUserPasswordSecretName: !Ref AuroraMysqlMasterUserPasswordParam

  CognitoAuth:
    Type: AWS::CloudFormation::Stack
    DependsOn: LambdaFunctionCICDPipeline
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "cognito-auth.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        # Should be the same as FunctionName of LambdaFunctionCICDPipeline Stack
        CognitoUserExporterFunctionName: !Sub "${ProjectIdentifierName}-${EnvironmentName}-cognito-user-exporter"
        SNSRoleArn:
          Fn::GetAtt: [IAM, Outputs.SNSRoleArn]
        # Should be the same as UserGroup of LambdaFunctionCICDPipeline Stack
        DefaultUserGroupName: !Sub "${ProjectIdentifierName}-default-ug"
        UserFilesBucketArn:
          Fn::GetAtt: [Storage, Outputs.UserFilesBucketArn]

  AppSync:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "appsync.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        ResourceBucketName: !Ref ResourceBucketName
        AppSyncLogRoleArn:
          Fn::GetAtt: [IAM, Outputs.AppSyncLogRoleArn]
        AppSyncResourceDynamoDbRoleArn:
          Fn::GetAtt: [IAM, Outputs.AppSyncResourceDynamoDbRoleArn]
        AppSyncResourceLambdaRoleArn:
          Fn::GetAtt: [IAM, Outputs.AppSyncResourceLambdaRoleArn]
        UserTableName:
          Fn::GetAtt: [Data, Outputs.UserTable]
        CantoTableName:
          Fn::GetAtt: [Data, Outputs.CantoTable]
        StreamTableName:
          Fn::GetAtt: [Data, Outputs.StreamTable]
        LikeTableName:
          Fn::GetAtt: [Data, Outputs.StreamLikeTable]
        CommentTableName:
          Fn::GetAtt: [Data, Outputs.StreamCommentTable]
        UserInteractionTableName:
          Fn::GetAtt: [Data, Outputs.UserInteractionTable]
        FlagTableName:
          Fn::GetAtt: [Data, Outputs.FlagTable]
        UncloggerPromptTableName:
          Fn::GetAtt: [Data, Outputs.UncloggerPromptTable]
        RecaptchaTokenResolverFunctionArn:
          !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectIdentifierName}-${EnvironmentName}-token-resolver"
        ResourceSearcherFunctionArn:
          !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectIdentifierName}-${EnvironmentName}-resource-searcher"

  WebServing:
    Type: AWS::CloudFormation::Stack
    Condition: CreateWebServing
    Properties:
      TemplateURL: !Join ["/", [ !Ref TemplateS3Bucket, "webserving.yaml"]]
      Parameters:
        ProjectIdentifierName: !Ref ProjectIdentifierName
        EnvironmentName: !Ref EnvironmentName
        DomainName: !Ref DomainName
        ZohoCname: !Ref ZohoCname
        CertificateDelegatingFunctionArn:
          !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectIdentifierName}-${EnvironmentName}-certificate-delegate"
